#!/bin/bash

DeclarePlugin Config pkgRepo:on "
	cmd_run:    pkgRepo::run:on
	goal: TODO: <write goal text for this Config plugin>
"

# This function is the declarative code that defines the unit of configuration that the Config Plugin implements
# Typically, it should contain only cr_ statements and should avoid side affects. Any valid bash syntax is allowed
function pkgRepo::run:on() {
	# get the parameters from the domConfig system. There are reasonable defaults for all
	local domain;             configGet -R domain               .       domain          "localhost"
	local repoUpstream;       configGet -R repoUpstream         pkgRepo upstream        "mirrors.edge.kernel.org"

	local repoRoot;           configGet -R repoRoot             pkgRepo root            "/var/lib/bg-pkgRepo"
	local repoChannels;       configGet -R repoChannels         pkgRepo channels        "focal focal-updates focal-backports focal-security" ; repoChannels=(     $repoChannels)
	local repoComponents;     configGet -R repoComponents       pkgRepo components      "main restricted universe multiverse domain"  ; repoComponents=(   $repoComponents)
	local repoArchitectures;  configGet -R repoArchitectures    pkgRepo architectures   "amd64"                                ; repoArchitectures=($repoArchitectures)
	local repoLanguages;      configGet -R repoLanguages        pkgRepo languages       "en"                                   ; repoLanguages=($repoLanguages)
	local repoServerName;     configGet -R repoServerName       pkgRepo serverName      "pkgrepo.$domain"


	### Dependant Packages
	creq cr_packageInstalled inotify-tools
	creq cr_packageInstalled nginx-light


	### User Config
	creq cr_systemGroupExists "pkgrepogroup"
	creq cr_systemUserExists -g"pkgrepogroup" "pkgrepouser"
	creq cr_systemUserIsInGroup "pkgrepouser" "pkgrepogroup"


	### Base Folders
	creq cr_fileObjHasAttributes -u pkgrepouser -g pkgrepogroup  --perm="d rwx rws r-x"  "${repoRoot}/www/ubuntu/dists/"
	creq cr_fileObjHasAttributes -u pkgrepouser -g pkgrepogroup  --perm="d rwx rws r-x"  "${repoRoot}/www/ubuntu/domainPool/"
	creq cr_fileObjHasAttributes -u pkgrepouser -g pkgrepogroup  --perm="d rwx rws r-x"  "${repoRoot}/www/ubuntu/pool/"
	creq cr_fileObjHasAttributes -u pkgrepouser -g pkgrepogroup  --perm="d rwx rws r-x"  "${repoRoot}/staging/"
	creq cr_fileObjHasAttributes -u pkgrepouser -g pkgrepogroup  --perm="d rwx rws r-x"  "${repoRoot}/incoming/"

	creq cr_fileExists ${repoRoot}/README.txt "
		This is the data folder of the bg-pkgRepo-deb package. Use the command bg-pkgRepo to interact with it. See its man page and
		man bg_pkgRepo.sh.

		incoming/       : is a folder for new package submissions from the local domain.
		domainPool/     : is the SOR for packages added to this local domain repository server. If packages found in incoming/ are accepted,
		                  they are copied here.
		domComponents.awkData: is a text DB that keeps track of which debs in domainPool/ are available in each sub-repo identified by the
		                  triplet (<channel>,<component>,<arch>). Initially, these local debs are only added to the component 'domain'. The
		                  'domain' component is added to each mirrored channels. For release channels unique to this server, 'domain' to
		                  typically the only component.
		hashCmds.txt    : is a data file that allows looking up the command name of a hash given the hash name found in Release files.
		                Typically the hash name can be converted to its corresponding command by converting its chars to lowercase and
		                appending 'sum' to it. If that is not the case a line can be added to this file like '<hashName>=<hashCmd>'
		www/            : is the documentroot of the web server.
		staging/        : is a working folder for updates. New indexes from repoUpstream are stored here.
		cache/          : is created and maintained by the nginx proxy_pass module. Its path is specified in the wwwVhost.nginx.pkgRepo template
		                  This folder contains the cached deb package files in the pool folder that have been downloaded from the upstream.
		                  This folder can be deleted at any time and will be recreated as clients use the repository.
		"


	### Web Server Config
	creq cr_templateIsExpanded -c webPage.repoGreetings  "$repoRoot/www/index.html"
	creqsTrackChangesStart -s nginx
	creq cr_templateIsExpanded -c wwwVHost.nginx.pkgRepo /etc/nginx/sites-available/pkgRepo.conf
	creq cr_configDropinCntr /etc/nginx/sites-enabled /etc/nginx/sites-available pkgRepo.conf enable
	creqsTrackChangesStop -s nginx
}


DeclarePlugin Config pkgRepo:off "
	cmd_run:    pkgRepo::run:off
	goal: TODO: <write goal text for this Config plugin>
"

function pkgRepo::run:off() {
	creqsTrackChangesStart -s nginx:reload
	creq cr_configDropinCntr /etc/nginx/sites-enabled /etc/nginx/sites-available pkgRepo.conf disable
	creqsTrackChangesStop -s nginx
}
